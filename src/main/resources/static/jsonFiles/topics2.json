[
  {
    "Id": 1,
    "DocTagId": 1,
    "IsHelloWorldTopic": true,
    "Title": "Getting started with StackExchange.Redis",
    "CreationDate": "\/Date(1446695335230-0500)\/",
    "ViewCount": 266,
    "LastEditDate": "\/Date(1492733341057-0400)\/",
    "LastEditUserId": 3331861,
    "ContributorCount": 5,
    "ExampleCount": 3,
    "ExampleScore": 6,
    "SyntaxHtml": "",
    "ParametersHtml": "",
    "RemarksHtml": "<a class=\"remarks-subsection-anchor\" name=\"remarks-installing-0\"></a>\r\n<h3>Installing</h3>\r\n<p>Binaries for StackExchange.Redis are <a href=\"https://www.nuget.org/packages/StackExchange.Redis/\" rel=\"nofollow noreferrer\">available on Nuget</a>, and the source is <a href=\"https://github.com/StackExchange/StackExchange.Redis\" rel=\"nofollow noreferrer\">available on Github</a>.</p>\r\n<a class=\"remarks-subsection-anchor\" name=\"remarks-common-tasks-1\"></a>\r\n<h3>Common Tasks</h3>\r\n<ul>\r\n<li><a class='doc-link' href=\"http://stackoverflow.com/documentation/stackexchange.redis/4/profiling\">Profiling</a></li>\r\n</ul>\r\n\r\n",
    "IntroductionMarkdown": "",
    "SyntaxMarkdown": "",
    "ParametersMarkdown": "",
    "RemarksMarkdown": "### Installing\n\nBinaries for StackExchange.Redis are [available on Nuget][1], and the source is [available on Github][2].\n\n  [1]: https://www.nuget.org/packages/StackExchange.Redis/\n  [2]: https://github.com/StackExchange/StackExchange.Redis\n\n### Common Tasks\n\n - [Profiling](http://stackoverflow.com/documentation/stackexchange.redis/4/profiling)",
    "HelloWorldVersionsHtml": "<table><thead><tr><th>Version</th><th>Release Date</th></tr></thead><tbody><tr><td>1.0.187</td><td>2014-03-18</td></tr></tbody></table>\r\n"
  },
  {
    "Id": 2,
    "DocTagId": 2,
    "IsHelloWorldTopic": true,
    "Title": "Getting started with Dapper.NET",
    "CreationDate": "\/Date(1446695376637-0500)\/",
    "ViewCount": 1424,
    "LastEditDate": "\/Date(1482914323857-0500)\/",
    "LastEditUserId": 563532,
    "ContributorCount": 11,
    "ExampleCount": 3,
    "ExampleScore": 35,
    "SyntaxHtml": "",
    "ParametersHtml": "",
    "RemarksHtml": "<a class=\"remarks-subsection-anchor\" name=\"remarks-what-is-dapper?-0\"></a>\r\n<h2>What is Dapper?</h2>\r\n<p><a href=\"http://stackexchange.github.io/dapper-dot-net/\" rel=\"nofollow noreferrer\">Dapper</a> is a micro-ORM for .Net that extends your <code>IDbConnection</code>, simplifying query setup, execution, and result-reading.</p>\r\n<a class=\"remarks-subsection-anchor\" name=\"remarks-how-do-i-get-it?-1\"></a>\r\n<h2>How do I get it?</h2>\r\n<ul>\r\n<li>github: <a href=\"https://github.com/StackExchange/dapper-dot-net\" rel=\"nofollow noreferrer\">https://github.com/StackExchange/dapper-dot-net</a></li>\r\n<li>NuGet: <a href=\"https://www.nuget.org/packages/Dapper\" rel=\"nofollow noreferrer\">https://www.nuget.org/packages/Dapper</a></li>\r\n</ul>\r\n<a class=\"remarks-subsection-anchor\" name=\"remarks-common-tasks-2\"></a>\r\n<h2>Common Tasks</h2>\r\n<ul>\r\n<li><a class='doc-link' href=\"http://stackoverflow.com/documentation/dapper/3/basic-querying\">Basic Querying</a></li>\r\n<li><a class='doc-link' href=\"http://stackoverflow.com/documentation/dapper/5/executing-commands\">Executing Commands</a></li>\r\n</ul>\r\n\r\n",
    "IntroductionMarkdown": "",
    "SyntaxMarkdown": "",
    "ParametersMarkdown": "",
    "RemarksMarkdown": "## What is Dapper?\n\n[Dapper][1] is a micro-ORM for .Net that extends your `IDbConnection`, simplifying query setup, execution, and result-reading.\n\n## How do I get it?\n\n - github: https://github.com/StackExchange/dapper-dot-net\n - NuGet: https://www.nuget.org/packages/Dapper\n\n## Common Tasks\n\n  - [Basic Querying](http://stackoverflow.com/documentation/dapper/3/basic-querying)\n  - [Executing Commands](http://stackoverflow.com/documentation/dapper/5/executing-commands)\n\n\n  [1]: http://stackexchange.github.io/dapper-dot-net/",
    "HelloWorldVersionsHtml": "<table><thead><tr><th>Version</th><th>Notes</th><th>Release Date</th></tr></thead><tbody><tr><td>1.50.0</td><td>core-clr / asp.net 5.0 build against RTM</td><td>2016-06-29</td></tr><tr><td>1.42.0</td><td></td><td>2015-05-06</td></tr><tr><td>1.40.0</td><td></td><td>2015-04-03</td></tr><tr><td>1.30.0</td><td></td><td>2014-08-14</td></tr><tr><td>1.20.0</td><td></td><td>2014-05-08</td></tr><tr><td>1.10.0</td><td></td><td>2012-06-27</td></tr><tr><td>1.0.0</td><td></td><td>2011-04-14</td></tr></tbody></table>\r\n"
  },
  {
    "Id": 3,
    "DocTagId": 2,
    "IsHelloWorldTopic": false,
    "Title": "Basic Querying",
    "CreationDate": "\/Date(1446756635723-0500)\/",
    "ViewCount": 605,
    "LastEditDate": "\/Date(1469495995453-0400)\/",
    "LastEditUserId": 2193900,
    "ContributorCount": 9,
    "ExampleCount": 3,
    "ExampleScore": 14,
    "SyntaxHtml": "<ul>\r\n<li>public static IEnumerable&lt;T&gt; Query&lt;T&gt;(this IDbConnection cnn, string sql, object param = null, SqlTransaction transaction = null, bool buffered = true)</li>\r\n<li>public static IEnumerable&lt;dynamic&gt; Query (this IDbConnection cnn, string sql, object param = null, SqlTransaction transaction = null, bool buffered = true)</li>\r\n</ul>\r\n\r\n",
    "ParametersHtml": "<table><thead><tr><th>Parameter</th><th>Details</th></tr></thead><tbody><tr><td>cnn</td><td>Your database connection, which must already be open.</td></tr><tr><td>sql</td><td>Command to execute.</td></tr><tr><td>param</td><td>Object to extract parameters from.</td></tr><tr><td>transaction</td><td>Transaction which this query is a part of, if any.</td></tr><tr><td>buffered</td><td>Whether or not to buffer reading the results of the query. This is an optional parameter with the default being true. When buffered is true, the results are buffered into a <code>List&lt;T&gt;</code> and then returned as an <code>IEnumerable&lt;T&gt;</code> that is safe for multiple enumeration. When buffered is false, the sql connection is held open until you finish reading allowing you to process a single row at time in memory. Multiple enumerations will spawn additional connections to the database. While buffered false is highly efficient for reducing memory usage if you only maintain very small fragments of the records returned it has a <a href=\"http://stackoverflow.com/a/30493725/37055\">sizeable performance overhead</a> compared to eagerly materializing the result set. Lastly if you have numerous concurrent unbuffered sql connections you need to consider connection pool starvation causing requests to block until connections become available.</td></tr></tbody></table>\r\n",
    "RemarksHtml": "",
    "IntroductionMarkdown": "",
    "SyntaxMarkdown": " - public static IEnumerable&lt;T&gt; Query&lt;T&gt;(this IDbConnection cnn, string sql, object param = null, SqlTransaction transaction = null, bool buffered = true)\n - public static IEnumerable&lt;dynamic&gt; Query (this IDbConnection cnn, string sql, object param = null, SqlTransaction transaction = null, bool buffered = true)",
    "ParametersMarkdown": "| Parameter | Details |  \n| --------- | ------- |  \n| cnn       | Your database connection, which must already be open. |  \n| sql       | Command to execute. |  \n| param     | Object to extract parameters from. |\n| transaction | Transaction which this query is a part of, if any.  |\n| buffered    | Whether or not to buffer reading the results of the query. This is an optional parameter with the default being true. When buffered is true, the results are buffered into a `List<T>` and then returned as an `IEnumerable<T>` that is safe for multiple enumeration. When buffered is false, the sql connection is held open until you finish reading allowing you to process a single row at time in memory. Multiple enumerations will spawn additional connections to the database. While buffered false is highly efficient for reducing memory usage if you only maintain very small fragments of the records returned it has a [sizeable performance overhead](http://stackoverflow.com/a/30493725/37055) compared to eagerly materializing the result set. Lastly if you have numerous concurrent unbuffered sql connections you need to consider connection pool starvation causing requests to block until connections become available.   |\n",
    "RemarksMarkdown": "",
    "HelloWorldVersionsHtml": "",
    "VersionsJson": "[]"
  },
  {
    "Id": 4,
    "DocTagId": 1,
    "IsHelloWorldTopic": false,
    "Title": "Profiling",
    "CreationDate": "\/Date(1446757464877-0500)\/",
    "ViewCount": 60,
    "LastEditDate": "\/Date(1446832252823-0500)\/",
    "LastEditUserId": 6212,
    "ContributorCount": 3,
    "ExampleCount": 2,
    "ExampleScore": 2,
    "SyntaxHtml": "",
    "ParametersHtml": "",
    "RemarksHtml": "<p>StackExchange.Redis's profiling features are composed of the <code>IProfiler</code> interface, and the <code>ConnectionMultiplexer.RegisterProfiler(IProfiler)</code>, <code>ConnectionMultiplexer.BeginProfiling(object)</code>, <code>ConnectionMultiplexer.FinishProfiling(object)</code> methods.</p>\r\n<p>Begin and Finish profiling take a context <code>object</code> so that related commands can be grouped together.</p>\r\n<p>This grouping works by querying your <code>IProfiler</code> interface for a context object at the start of a command, before any threading shenanigans have happened, and associating that command with a any other commands that have the same context object.  Begin must be called with the same context object so StackExchange.Redis knows to start profiling commands with that context object, and Finish is called to stop profiling and return the results.</p>\r\n\r\n",
    "IntroductionMarkdown": "",
    "SyntaxMarkdown": "",
    "ParametersMarkdown": "",
    "RemarksMarkdown": "StackExchange.Redis's profiling features are composed of the `IProfiler` interface, and the `ConnectionMultiplexer.RegisterProfiler(IProfiler)`, `ConnectionMultiplexer.BeginProfiling(object)`, `ConnectionMultiplexer.FinishProfiling(object)` methods.\n\nBegin and Finish profiling take a context `object` so that related commands can be grouped together.\n\nThis grouping works by querying your `IProfiler` interface for a context object at the start of a command, before any threading shenanigans have happened, and associating that command with a any other commands that have the same context object.  Begin must be called with the same context object so StackExchange.Redis knows to start profiling commands with that context object, and Finish is called to stop profiling and return the results.",
    "HelloWorldVersionsHtml": "",
    "VersionsJson": "[]"
  },
  {
    "Id": 5,
    "DocTagId": 2,
    "IsHelloWorldTopic": false,
    "Title": "Executing Commands",
    "CreationDate": "\/Date(1446764755727-0500)\/",
    "ViewCount": 144,
    "LastEditDate": "\/Date(1474897438383-0400)\/",
    "LastEditUserId": 520044,
    "ContributorCount": 4,
    "ExampleCount": 2,
    "ExampleScore": 3,
    "SyntaxHtml": "",
    "ParametersHtml": "",
    "RemarksHtml": "",
    "IntroductionMarkdown": "",
    "SyntaxMarkdown": "",
    "ParametersMarkdown": "",
    "RemarksMarkdown": "",
    "HelloWorldVersionsHtml": "",
    "VersionsJson": "[]"
  },
  {
    "Id": 6,
    "DocTagId": 2,
    "IsHelloWorldTopic": false,
    "Title": "Type Handlers",
    "CreationDate": "\/Date(1446804524380-0500)\/",
    "ViewCount": 165,
    "LastEditDate": "\/Date(1468858386037-0400)\/",
    "LastEditUserId": 1523776,
    "ContributorCount": 3,
    "ExampleCount": 2,
    "ExampleScore": 5,
    "SyntaxHtml": "",
    "ParametersHtml": "",
    "RemarksHtml": "<p>Type Handlers allow database types to be converted to .Net custom types.</p>\r\n\r\n",
    "IntroductionMarkdown": "",
    "SyntaxMarkdown": "",
    "ParametersMarkdown": "",
    "RemarksMarkdown": "Type Handlers allow database types to be converted to .Net custom types.",
    "HelloWorldVersionsHtml": "",
    "VersionsJson": "[]"
  },
  {
    "Id": 8,
    "DocTagId": 2,
    "IsHelloWorldTopic": false,
    "Title": "Multiple Results",
    "CreationDate": "\/Date(1447105559150-0500)\/",
    "ViewCount": 214,
    "LastEditDate": "\/Date(1447184468920-0500)\/",
    "LastEditUserId": 23354,
    "ContributorCount": 2,
    "ExampleCount": 1,
    "ExampleScore": 5,
    "SyntaxHtml": "<ul>\r\n<li>public static SqlMapper.GridReader QueryMultiple(this IDbConnection cnn, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)</li>\r\n<li>public static SqlMapper.GridReader QueryMultiple(this IDbConnection cnn, CommandDefinition command)</li>\r\n</ul>\r\n\r\n",
    "ParametersHtml": "<table><thead><tr><th>Parameter</th><th>Details</th></tr></thead><tbody><tr><td>cnn</td><td>Your database connection, must already be open</td></tr><tr><td>sql</td><td>The sql string to process, contains multiple queries</td></tr><tr><td>param</td><td>Object to extract parameters from</td></tr><tr><td>SqlMapper.GridReader</td><td>Provides interfaces for reading multiple result sets from a Dapper query</td></tr></tbody></table>\r\n",
    "RemarksHtml": "",
    "IntroductionMarkdown": "",
    "SyntaxMarkdown": " - public static SqlMapper.GridReader QueryMultiple(this IDbConnection cnn, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n - public static SqlMapper.GridReader QueryMultiple(this IDbConnection cnn, CommandDefinition command)",
    "ParametersMarkdown": "| Parameter | Details |  \n| --------- | ------- |  \n| cnn | Your database connection, must already be open |  \n| sql | The sql string to process, contains multiple queries |\n| param | Object to extract parameters from |\n| SqlMapper.GridReader | Provides interfaces for reading multiple result sets from a Dapper query |\n",
    "RemarksMarkdown": "",
    "HelloWorldVersionsHtml": "",
    "VersionsJson": "[]"
  },
  {
    "Id": 10,
    "DocTagId": 2,
    "IsHelloWorldTopic": false,
    "Title": "Parameter Syntax Reference",
    "CreationDate": "\/Date(1447180872393-0500)\/",
    "ViewCount": 298,
    "LastEditDate": "\/Date(1499826696937-0400)\/",
    "LastEditUserId": 1464444,
    "ContributorCount": 3,
    "ExampleCount": 5,
    "ExampleScore": 27,
    "SyntaxHtml": "",
    "ParametersHtml": "<table><thead><tr><th>Parameter</th><th>Details</th></tr></thead><tbody><tr><td><code>this cnn</code></td><td>The underlying database connection - the <code>this</code> denotes an extension method; the connection does not need to be open - if it is not open, it is opened and closed automatically.</td></tr><tr><td><code>&lt;T&gt;</code> / <code>Type</code></td><td>(optional) The type of object to return; if the non-generic / non-<code>Type</code> API is used, a <code>dynamic</code> object is returned per row, simulating a property named per column name  returned from the query (this <code>dynamic</code> object also implements <code>IDicionary&lt;string,object&gt;</code>).</td></tr><tr><td><code>sql</code></td><td>The SQL to execute</td></tr><tr><td><code>param</code></td><td>(optional) The parameters to include.</td></tr><tr><td><code>transaction</code></td><td>(optional) The database transaction to associate with the command</td></tr><tr><td><code>buffered</code></td><td>(optional) Whether to pre-consume the data into a list (the default), versus exposing an open <code>IEnumerable</code> over the live reader</td></tr><tr><td><code>commandTimeout</code></td><td>(optional) The timeout to use on the command; if not specified, <code>SqlMapper.Settings.CommandTimeout</code> is assumed (if specified)</td></tr><tr><td><code>commandType</code></td><td>The type of command being performed; defaults to <code>CommandText</code></td></tr></tbody></table>\r\n",
    "RemarksHtml": "<p>The syntax for expressing parameters varies between RDBMS. All the examples above use SQL Server syntax, i.e. <code>@foo</code>; however, <code>?foo</code> and <code>:foo</code> should also work fine.</p>\r\n\r\n",
    "IntroductionMarkdown": "",
    "SyntaxMarkdown": "",
    "ParametersMarkdown": "| Parameter | Details |  \n| --------- | ------- |  \n| `this cnn` | The underlying database connection - the `this` denotes an extension method; the connection does not need to be open - if it is not open, it is opened and closed automatically.\n| `<T>` / `Type` | (optional) The type of object to return; if the non-generic / non-`Type` API is used, a `dynamic` object is returned per row, simulating a property named per column name  returned from the query (this `dynamic` object also implements `IDicionary<string,object>`).\n| `sql` | The SQL to execute\n| `param` | (optional) The parameters to include.\n| `transaction` | (optional) The database transaction to associate with the command\n| `buffered` | (optional) Whether to pre-consume the data into a list (the default), versus exposing an open `IEnumerable` over the live reader\n| `commandTimeout` | (optional) The timeout to use on the command; if not specified, `SqlMapper.Settings.CommandTimeout` is assumed (if specified)\n| `commandType` | The type of command being performed; defaults to `CommandText`",
    "RemarksMarkdown": "The syntax for expressing parameters varies between RDBMS. All the examples above use SQL Server syntax, i.e. `@foo`; however, `?foo` and `:foo` should also work fine.",
    "HelloWorldVersionsHtml": "",
    "VersionsJson": "[]"
  },
  {
    "Id": 11,
    "DocTagId": 1,
    "IsHelloWorldTopic": false,
    "Title": "Keys and Values",
    "CreationDate": "\/Date(1447183404893-0500)\/",
    "ViewCount": 88,
    "LastEditDate": "\/Date(1454636009447-0500)\/",
    "LastEditUserId": 1314276,
    "ContributorCount": 3,
    "ExampleCount": 2,
    "ExampleScore": 0,
    "SyntaxHtml": "",
    "ParametersHtml": "",
    "RemarksHtml": "",
    "IntroductionMarkdown": "",
    "SyntaxMarkdown": "",
    "ParametersMarkdown": "",
    "RemarksMarkdown": "",
    "HelloWorldVersionsHtml": "",
    "VersionsJson": "[]"
  },
  {
    "Id": 12,
    "DocTagId": 2,
    "IsHelloWorldTopic": false,
    "Title": "Dynamic Parameters",
    "CreationDate": "\/Date(1447185109110-0500)\/",
    "ViewCount": 1209,
    "LastEditDate": "\/Date(1469133365330-0400)\/",
    "LastEditUserId": 2193900,
    "ContributorCount": 3,
    "ExampleCount": 3,
    "ExampleScore": 8,
    "SyntaxHtml": "",
    "ParametersHtml": "",
    "RemarksHtml": "",
    "IntroductionMarkdown": "",
    "SyntaxMarkdown": "",
    "ParametersMarkdown": "",
    "RemarksMarkdown": "",
    "HelloWorldVersionsHtml": "",
    "VersionsJson": "[]"
  },
  {
    "Id": 13,
    "DocTagId": 2,
    "IsHelloWorldTopic": false,
    "Title": "Handling Nulls",
    "CreationDate": "\/Date(1447185677773-0500)\/",
    "ViewCount": 66,
    "LastEditDate": "\/Date(1447189438560-0500)\/",
    "LastEditUserId": 23354,
    "ContributorCount": 1,
    "ExampleCount": 1,
    "ExampleScore": 4,
    "SyntaxHtml": "",
    "ParametersHtml": "",
    "RemarksHtml": "",
    "IntroductionMarkdown": "",
    "SyntaxMarkdown": "",
    "ParametersMarkdown": "",
    "RemarksMarkdown": "",
    "HelloWorldVersionsHtml": "",
    "VersionsJson": "[]"
  },
  {
    "Id": 14,
    "DocTagId": 3,
    "IsHelloWorldTopic": true,
    "Title": "Getting started with .NET Framework",
    "CreationDate": "\/Date(1447273894907-0500)\/",
    "ViewCount": 2495,
    "LastEditDate": "\/Date(1499362270520-0400)\/",
    "LastEditUserId": 23528,
    "ContributorCount": 37,
    "ExampleCount": 10,
    "ExampleScore": 200,
    "SyntaxHtml": "",
    "ParametersHtml": "",
    "RemarksHtml": "<p>The .NET Framework is a set of libraries and a runtime, originally designed by Microsoft. All .NET programs compile to a bytecode called Microsoft Intermediate Language (MSIL). The MSIL is run by the Common Language Runtime (CLR).</p>\r\n<p>Below you can find several examples of &quot;Hello World&quot; in various languages that support the .NET Framework. &quot;Hello World&quot; is a program that displays &quot;Hello World&quot; on the display device. It's used for illustrating the basic syntax for constructing a working program. It can also be used as a sanity test to make sure that a language's compiler, development environment, and runtime environment are all working correctly.</p>\r\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_CLI_languages\" rel=\"nofollow noreferrer\">List of languages supported by .NET</a></p>\r\n\r\n",
    "IntroductionMarkdown": "",
    "SyntaxMarkdown": "",
    "ParametersMarkdown": "",
    "RemarksMarkdown": "The .NET Framework is a set of libraries and a runtime, originally designed by Microsoft. All .NET programs compile to a bytecode called Microsoft Intermediate Language (MSIL). The MSIL is run by the Common Language Runtime (CLR).\n\nBelow you can find several examples of \"Hello World\" in various languages that support the .NET Framework. \"Hello World\" is a program that displays \"Hello World\" on the display device. It's used for illustrating the basic syntax for constructing a working program. It can also be used as a sanity test to make sure that a language's compiler, development environment, and runtime environment are all working correctly.\n\n[List of languages supported by .NET](https://en.wikipedia.org/wiki/List_of_CLI_languages)",
    "HelloWorldVersionsHtml": "<h2>.NET</h2>\r\n<table><thead><tr><th>Version</th><th>Release Date</th></tr></thead><tbody><tr><td><a href=\"https://en.wikipedia.org/wiki/.NET_Framework_version_history#.NET_Framework_1.0\" rel=\"nofollow noreferrer\">1.0</a></td><td>2002-02-13</td></tr><tr><td><a href=\"https://en.wikipedia.org/wiki/.NET_Framework_version_history#.NET_Framework_1.1\" rel=\"nofollow noreferrer\">1.1</a></td><td>2003-04-24</td></tr><tr><td><a href=\"https://en.wikipedia.org/wiki/.NET_Framework_version_history#.NET_Framework_2.0\" rel=\"nofollow noreferrer\">2.0</a></td><td>2005-11-07</td></tr><tr><td><a href=\"https://en.wikipedia.org/wiki/.NET_Framework_version_history#.NET_Framework_3.0\" rel=\"nofollow noreferrer\">3.0</a></td><td>2006-11-06</td></tr><tr><td><a href=\"https://en.wikipedia.org/wiki/.NET_Framework_version_history#.NET_Framework_3.5\" rel=\"nofollow noreferrer\">3.5</a></td><td>2007-11-19</td></tr><tr><td><a href=\"https://en.wikipedia.org/wiki/.NET_Framework_version_history#Service_Pack_1\" rel=\"nofollow noreferrer\">3.5 SP1</a></td><td>2008-08-11</td></tr><tr><td><a href=\"https://en.wikipedia.org/wiki/.NET_Framework_version_history#.NET_Framework_4\" rel=\"nofollow noreferrer\">4.0</a></td><td>2010-04-12</td></tr><tr><td><a href=\"https://en.wikipedia.org/wiki/.NET_Framework_version_history#.NET_Framework_4.5\" rel=\"nofollow noreferrer\">4.5</a></td><td>2012-08-15</td></tr><tr><td><a href=\"https://en.wikipedia.org/wiki/.NET_Framework_version_history#.NET_Framework_4.5.1\" rel=\"nofollow noreferrer\">4.5.1</a></td><td>2013-10-17</td></tr><tr><td><a href=\"https://en.wikipedia.org/wiki/.NET_Framework_version_history#.NET_Framework_4.5.2\" rel=\"nofollow noreferrer\">4.5.2</a></td><td>2014-05-05</td></tr><tr><td><a href=\"https://en.wikipedia.org/wiki/.NET_Framework_version_history#.NET_Framework_4.6\" rel=\"nofollow noreferrer\">4.6</a></td><td>2015-07-20</td></tr><tr><td><a href=\"https://en.wikipedia.org/wiki/.NET_Framework_version_history#.NET_Framework_4.6.1\" rel=\"nofollow noreferrer\">4.6.1</a></td><td>2015-11-17</td></tr><tr><td><a href=\"https://en.wikipedia.org/wiki/.NET_Framework_version_history#.NET_Framework_4.6.2\" rel=\"nofollow noreferrer\">4.6.2</a></td><td>2016-08-02</td></tr><tr><td><a href=\"https://en.wikipedia.org/wiki/.NET_Framework_version_history#.NET_Framework_4.7\" rel=\"nofollow noreferrer\">4.7</a></td><td>2017-04-05</td></tr></tbody></table>\r\n<h2>Compact Framework</h2>\r\n<table><thead><tr><th>Version</th><th>Release Date</th></tr></thead><tbody><tr><td>1.0</td><td>2000-01-01</td></tr><tr><td>2.0</td><td>2005-10-01</td></tr><tr><td>3.5</td><td>2007-11-19</td></tr><tr><td>3.7</td><td>2009-01-01</td></tr><tr><td>3.9</td><td>2013-06-01</td></tr></tbody></table>\r\n<h2>Micro Framework</h2>\r\n<table><thead><tr><th>Version</th><th>Release Date</th></tr></thead><tbody><tr><td>4.2</td><td>2011-10-04</td></tr><tr><td>4.3</td><td>2012-12-04</td></tr><tr><td>4.4</td><td>2015-10-20</td></tr></tbody></table>\r\n"
  },
  {
    "Id": 10962,
    "DocTagId": 1199,
    "IsHelloWorldTopic": true,
    "Title": "Getting started with yocto",
    "CreationDate": "\/Date(1504092127073-0400)\/",
    "ViewCount": 1,
    "LastEditUserId": -1,
    "ContributorCount": 1,
    "ExampleCount": 1,
    "ExampleScore": 0,
    "IntroductionHtml": "",
    "SyntaxHtml": "",
    "ParametersHtml": "",
    "RemarksHtml": "<p>This section provides an overview of what yocto is, and why a developer might want to use it.</p>\r\n<p>It should also mention any large subjects within yocto, and link out to the related topics.  Since the Documentation for yocto is new, you may need to create initial versions of those related topics.</p>\r\n\r\n",
    "IntroductionMarkdown": "",
    "SyntaxMarkdown": "",
    "ParametersMarkdown": "",
    "RemarksMarkdown": "This section provides an overview of what yocto is, and why a developer might want to use it.\r\n\r\nIt should also mention any large subjects within yocto, and link out to the related topics.  Since the Documentation for yocto is new, you may need to create initial versions of those related topics.",
    "HelloWorldVersionsHtml": ""
  }
]